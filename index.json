[{"categories":["Automatisation","Benchmarks"],"contents":"Introduction Dans un prÃ©cÃ©dent article j\u0026rsquo;ai expliquÃ© comment choisir la meilleure stratÃ©gie de localisation webdriver en fonction du contexte du projet.\nEn revanche il manquait des donnÃ©es statistiques Css Vs.Xpath pour rÃ©duire la propagation du bruit ðŸ˜›\nEt justement pour trouver les donnÃ©es j\u0026rsquo;ai effectuÃ© plusieurs recherches sur internet â€¦\nMalheureusement aucune source fiable, claire Ã  l\u0026rsquo;exception d\u0026rsquo;un ancien benchmark de Dave Haeffner, mais les donnÃ©es ne sont pas Ã  jour depuis des annÃ©es !.\nJ\u0026rsquo;ai donc dÃ©cidÃ© de faire un benchmark pour mesurer la performance des sÃ©lecteurs Web Css et Xpath pour plusieurs navigateurs et sur plusieurs plateformes.\nPrÃ©paration du benchmark Comme tout benchmark la prÃ©paration du contexte est un Ã©lÃ©ment essentiel pour obtenir de bons rÃ©sultats.\nPour rÃ©aliser ce travail, je me suis servi de plusieurs idÃ©es provenant de l\u0026rsquo;ancien benchmark de Dave Haeffner notamment pour le choix des sÃ©lecteurs css/xpath et aussi pour la page web de test qui sera utilisÃ©e par ce benchmark.\nCette page Ã  Ã©tÃ© dÃ©veloppÃ©e par Dave pour rÃ©aliser son benchmark Ã  l\u0026rsquo;Ã©poque, elle contient une structure HTML particuliÃ¨rement intÃ©ressante (page large et profonde) pour faire des tests comparatifs css vs xpath sur plusieurs navigateurs â€¦\nLe principe de ce benchmark est simple, une fois la page de test est chargÃ©e par le navigateur, on exÃ©cute la commande selenium await driver.findElement(locator) plusieurs fois avec plusieurs stratÃ©gies css, xpath et on mesure pour chaque stratÃ©gie le nombre d\u0026rsquo;opÃ©rations par seconde.\nEt pour obtenir les meilleurs mesures possible je me suis servi du benchmarkjs un outil de benchmarking en javascript trÃ¨s populaire et possÃ¨de un algorithme qui calcul automatiquement le nombre des itÃ©rations nÃ©cessaires pour faire un test et exÃ©cute Ã©galement des tests Ã  vide pour assurer une certaine stabilitÃ© avant de lancer le benchmark.\nLa page sous test n\u0026rsquo;est qu\u0026rsquo;une version locale de la page disponible ici, elle est servie localement via le framework expressjs.\nUn dernier point important, le benchmark est exÃ©cutÃ© sur des machines virtuelles similaires (configuration hardware similaire) sur la plateforme Github Actions.\nCette configuration nous permet d\u0026rsquo;Ã©viter les effets de bord notamment la latence de la transmission des donnÃ©es via internet etc.\nLes localisateurs Css et Xpath Plusieurs localisateurs css, xpath on Ã©tÃ© utilisÃ©s (ce sont les mÃªme localisateurs de Dave), le choix est bien Ã©tudiÃ©, on retrouve des localisateurs simples (ID, class, etc.), mais aussi des localisateurs complexes pour traverser entiÃ¨rement la page â€¦.\nJe vous donne ici un exemple, mais attention il ne faut pas utiliser ce type de localisateurs dans vos projets câ€™est fragile, n\u0026rsquo;hÃ©sitez pas de regarder cet article pour savoir comment choisir la meilleure stratÃ©gie possible\n Exemple localisateur CSS  div#siblings \u0026gt; div:nth-of-type(1) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3) \u0026gt; div:nth-of-type(3)   La liste complete des localisateurs webdriver (stratÃ©gies)     Option Description     Locator 1 nested sibling traversal   Locator 2 nested sibling traversal by class   Locator 3 table header id_and_class   Locator 4 table header id class and direct desc   Locator 5 table header traversing   Locator 6 table header traversing and direct desc   Locator 7 table cell id and_class   Locator 8 table cell id class and direct desc   Locator 9 table cell traversing   Locator 10 table cell traversing and direct desc    Les resultats Chrome Chrome | Linux   Rapport graphique\n  Log benchmark-js\n  Output css =\u0026gt; nested_sibling_traversal x 139 ops/sec Â±8.44% (72 runs sampled) xpath =\u0026gt; nested_sibling_traversal x 132 ops/sec Â±1.78% (78 runs sampled) css =\u0026gt; nested_sibling_traversal_by_class x 153 ops/sec Â±1.53% (80 runs sampled) xpath =\u0026gt; nested_sibling_traversal_by_class x 98.61 ops/sec Â±1.58% (77 runs sampled) css =\u0026gt; table_header_id_and_class x 157 ops/sec Â±1.49% (81 runs sampled) xpath =\u0026gt; table_header_id_and_class x 139 ops/sec Â±1.47% (81 runs sampled) css =\u0026gt; table_header_id_class_and_direct_desc x 158 ops/sec Â±1.19% (82 runs sampled) xpath =\u0026gt; table_header_id_class_and_direct_desc x 142 ops/sec Â±1.26% (83 runs sampled) css =\u0026gt; table_header_traversing x 158 ops/sec Â±1.41% (82 runs sampled) xpath =\u0026gt; table_header_traversing x 139 ops/sec Â±1.51% (81 runs sampled) css =\u0026gt; table_header_traversing_and_direct_desc x 158 ops/sec Â±1.36% (82 runs sampled) xpath =\u0026gt; table_header_traversing_and_direct_desc x 141 ops/sec Â±1.17% (82 runs sampled) css =\u0026gt; table_cell_id_and_class x 159 ops/sec Â±1.06% (83 runs sampled) xpath =\u0026gt; table_cell_id_and_class x 111 ops/sec Â±1.56% (75 runs sampled) css =\u0026gt; table_cell_id_class_and_direct_desc x 159 ops/sec Â±1.35% (81 runs sampled) xpath =\u0026gt; table_cell_id_class_and_direct_desc x 114 ops/sec Â±1.62% (77 runs sampled) css =\u0026gt; table_cell_traversing x 162 ops/sec Â±1.37% (82 runs sampled) xpath =\u0026gt; table_cell_traversing x 104 ops/sec Â±1.87% (76 runs sampled) css =\u0026gt; table_cell_traversing_and_direct_desc x 161 ops/sec Â±1.44% (77 runs sampled) xpath =\u0026gt; table_cell_traversing_and_direct_desc x 123 ops/sec Â±1.78% (73 runs sampled)  Chrome | Windows  Rapport graphique\n Log benchmark-js  Output css =\u0026gt; nested_sibling_traversal x 156 ops/sec Â±2.04% (77 runs sampled) xpath =\u0026gt; nested_sibling_traversal x 144 ops/sec Â±5.36% (75 runs sampled) css =\u0026gt; nested_sibling_traversal_by_class x 185 ops/sec Â±1.55% (78 runs sampled) xpath =\u0026gt; nested_sibling_traversal_by_class x 103 ops/sec Â±2.30% (74 runs sampled) css =\u0026gt; table_header_id_and_class x 192 ops/sec Â±1.34% (80 runs sampled) xpath =\u0026gt; table_header_id_and_class x 155 ops/sec Â±1.64% (72 runs sampled) css =\u0026gt; table_header_id_class_and_direct_desc x 175 ops/sec Â±2.00% (81 runs sampled) xpath =\u0026gt; table_header_id_class_and_direct_desc x 156 ops/sec Â±1.63% (79 runs sampled) css =\u0026gt; table_header_traversing x 181 ops/sec Â±3.12% (76 runs sampled) xpath =\u0026gt; table_header_traversing x 148 ops/sec Â±1.70% (76 runs sampled) css =\u0026gt; table_header_traversing_and_direct_desc x 180 ops/sec Â±1.52% (79 runs sampled) xpath =\u0026gt; table_header_traversing_and_direct_desc x 154 ops/sec Â±1.28% (79 runs sampled) css =\u0026gt; table_cell_id_and_class x 182 ops/sec Â±1.18% (79 runs sampled) xpath =\u0026gt; table_cell_id_and_class x 123 ops/sec Â±1.92% (72 runs sampled) css =\u0026gt; table_cell_id_class_and_direct_desc x 180 ops/sec Â±1.50% (76 runs sampled) xpath =\u0026gt; table_cell_id_class_and_direct_desc x 118 ops/sec Â±3.40% (72 runs sampled) css =\u0026gt; table_cell_traversing x 171 ops/sec Â±1.94% (79 runs sampled) xpath =\u0026gt; table_cell_traversing x 116 ops/sec Â±1.66% (77 runs sampled) css =\u0026gt; table_cell_traversing_and_direct_desc x 174 ops/sec Â±2.15% (80 runs sampled) xpath =\u0026gt; table_cell_traversing_and_direct_desc x 136 ops/sec Â±2.34% (79 runs sampled)  Chrome | MacOS  Rapport graphique\n Log benchmark-js  Output css =\u0026gt; nested_sibling_traversal x 174 ops/sec Â±6.86% (68 runs sampled) xpath =\u0026gt; nested_sibling_traversal x 160 ops/sec Â±1.35% (72 runs sampled) css =\u0026gt; nested_sibling_traversal_by_class x 192 ops/sec Â±1.37% (73 runs sampled) xpath =\u0026gt; nested_sibling_traversal_by_class x 114 ops/sec Â±2.57% (71 runs sampled) css =\u0026gt; table_header_id_and_class x 197 ops/sec Â±0.78% (75 runs sampled) xpath =\u0026gt; table_header_id_and_class x 171 ops/sec Â±1.00% (73 runs sampled) css =\u0026gt; table_header_id_class_and_direct_desc x 198 ops/sec Â±1.19% (72 runs sampled) xpath =\u0026gt; table_header_id_class_and_direct_desc x 166 ops/sec Â±1.37% (70 runs sampled) css =\u0026gt; table_header_traversing x 203 ops/sec Â±0.77% (76 runs sampled) xpath =\u0026gt; table_header_traversing x 170 ops/sec Â±1.31% (70 runs sampled) css =\u0026gt; table_header_traversing_and_direct_desc x 200 ops/sec Â±0.69% (75 runs sampled) xpath =\u0026gt; table_header_traversing_and_direct_desc x 172 ops/sec Â±1.23% (71 runs sampled) css =\u0026gt; table_cell_id_and_class x 202 ops/sec Â±0.84% (74 runs sampled) xpath =\u0026gt; table_cell_id_and_class x 128 ops/sec Â±1.46% (70 runs sampled) css =\u0026gt; table_cell_id_class_and_direct_desc x 206 ops/sec Â±0.72% (75 runs sampled) xpath =\u0026gt; table_cell_id_class_and_direct_desc x 130 ops/sec Â±1.32% (68 runs sampled) css =\u0026gt; table_cell_traversing x 204 ops/sec Â±0.87% (77 runs sampled) xpath =\u0026gt; table_cell_traversing x 120 ops/sec Â±1.84% (72 runs sampled) css =\u0026gt; table_cell_traversing_and_direct_desc x 205 ops/sec Â±0.71% (77 runs sampled) xpath =\u0026gt; table_cell_traversing_and_direct_desc x 151 ops/sec Â±1.41% (70 runs sampled)   Firefox Firefox | Linux  Rapport graphique\n Log benchmark-js  Output css =\u0026gt; nested_sibling_traversal x 356 ops/sec Â±4.82% (74 runs sampled) xpath =\u0026gt; nested_sibling_traversal x 347 ops/sec Â±3.88% (78 runs sampled) css =\u0026gt; nested_sibling_traversal_by_class x 424 ops/sec Â±3.74% (80 runs sampled) xpath =\u0026gt; nested_sibling_traversal_by_class x 144 ops/sec Â±10.40% (78 runs sampled) css =\u0026gt; table_header_id_and_class x 460 ops/sec Â±4.26% (79 runs sampled) xpath =\u0026gt; table_header_id_and_class x 403 ops/sec Â±3.73% (80 runs sampled) css =\u0026gt; table_header_id_class_and_direct_desc x 474 ops/sec Â±4.29% (82 runs sampled) xpath =\u0026gt; table_header_id_class_and_direct_desc x 431 ops/sec Â±3.47% (80 runs sampled) css =\u0026gt; table_header_traversing x 481 ops/sec Â±4.07% (79 runs sampled) xpath =\u0026gt; table_header_traversing x 396 ops/sec Â±5.16% (81 runs sampled) css =\u0026gt; table_header_traversing_and_direct_desc x 470 ops/sec Â±4.29% (80 runs sampled) xpath =\u0026gt; table_header_traversing_and_direct_desc x 411 ops/sec Â±4.91% (77 runs sampled) css =\u0026gt; table_cell_id_and_class x 494 ops/sec Â±1.59% (82 runs sampled) xpath =\u0026gt; table_cell_id_and_class x 300 ops/sec Â±1.34% (84 runs sampled) css =\u0026gt; table_cell_id_class_and_direct_desc x 511 ops/sec Â±1.36% (84 runs sampled) xpath =\u0026gt; table_cell_id_class_and_direct_desc x 312 ops/sec Â±1.32% (85 runs sampled) css =\u0026gt; table_cell_traversing x 509 ops/sec Â±1.46% (80 runs sampled) xpath =\u0026gt; table_cell_traversing x 290 ops/sec Â±1.28% (83 runs sampled) css =\u0026gt; table_cell_traversing_and_direct_desc x 520 ops/sec Â±1.43% (84 runs sampled) xpath =\u0026gt; table_cell_traversing_and_direct_desc x 420 ops/sec Â±4.66% (83 runs sampled)  Firefox | Windows  Rapport graphique\n Log benchmark-js  Output css =\u0026gt; nested_sibling_traversal x 350 ops/sec Â±8.12% (72 runs sampled) xpath =\u0026gt; nested_sibling_traversal x 347 ops/sec Â±3.56% (78 runs sampled) css =\u0026gt; nested_sibling_traversal_by_class x 437 ops/sec Â±4.55% (78 runs sampled) xpath =\u0026gt; nested_sibling_traversal_by_class x 140 ops/sec Â±2.69% (78 runs sampled) css =\u0026gt; table_header_id_and_class x 445 ops/sec Â±4.22% (76 runs sampled) xpath =\u0026gt; table_header_id_and_class x 382 ops/sec Â±3.40% (76 runs sampled) css =\u0026gt; table_header_id_class_and_direct_desc x 474 ops/sec Â±4.42% (77 runs sampled) xpath =\u0026gt; table_header_id_class_and_direct_desc x 420 ops/sec Â±3.59% (75 runs sampled) css =\u0026gt; table_header_traversing x 445 ops/sec Â±3.71% (78 runs sampled) xpath =\u0026gt; table_header_traversing x 371 ops/sec Â±4.41% (76 runs sampled) css =\u0026gt; table_header_traversing_and_direct_desc x 447 ops/sec Â±4.69% (76 runs sampled) xpath =\u0026gt; table_header_traversing_and_direct_desc x 397 ops/sec Â±1.95% (77 runs sampled) css =\u0026gt; table_cell_id_and_class x 460 ops/sec Â±2.30% (81 runs sampled) xpath =\u0026gt; table_cell_id_and_class x 277 ops/sec Â±1.69% (80 runs sampled) css =\u0026gt; table_cell_id_class_and_direct_desc x 418 ops/sec Â±7.28% (71 runs sampled) xpath =\u0026gt; table_cell_id_class_and_direct_desc x 292 ops/sec Â±2.51% (79 runs sampled) css =\u0026gt; table_cell_traversing x 488 ops/sec Â±3.12% (80 runs sampled) xpath =\u0026gt; table_cell_traversing x 262 ops/sec Â±1.40% (81 runs sampled) css =\u0026gt; table_cell_traversing_and_direct_desc x 430 ops/sec Â±17.77% (71 runs sampled) xpath =\u0026gt; table_cell_traversing_and_direct_desc x 189 ops/sec Â±30.31% (46 runs sampled)  Firefox | MacOS  Rapport graphique\n Log benchmark-js  Output css =\u0026gt; nested_sibling_traversal x 262 ops/sec Â±5.21% (61 runs sampled) xpath =\u0026gt; nested_sibling_traversal x 202 ops/sec Â±7.48% (56 runs sampled) css =\u0026gt; nested_sibling_traversal_by_class x 217 ops/sec Â±5.19% (62 runs sampled) xpath =\u0026gt; nested_sibling_traversal_by_class x 76.43 ops/sec Â±19.41% (54 runs sampled) css =\u0026gt; table_header_id_and_class x 311 ops/sec Â±5.94% (60 runs sampled) xpath =\u0026gt; table_header_id_and_class x 290 ops/sec Â±3.93% (63 runs sampled) css =\u0026gt; table_header_id_class_and_direct_desc x 308 ops/sec Â±4.52% (58 runs sampled) xpath =\u0026gt; table_header_id_class_and_direct_desc x 350 ops/sec Â±4.79% (58 runs sampled) css =\u0026gt; table_header_traversing x 345 ops/sec Â±3.48% (57 runs sampled) xpath =\u0026gt; table_header_traversing x 260 ops/sec Â±5.37% (61 runs sampled) css =\u0026gt; table_header_traversing_and_direct_desc x 326 ops/sec Â±6.55% (59 runs sampled) xpath =\u0026gt; table_header_traversing_and_direct_desc x 261 ops/sec Â±6.44% (56 runs sampled) css =\u0026gt; table_cell_id_and_class x 318 ops/sec Â±14.41% (63 runs sampled) xpath =\u0026gt; table_cell_id_and_class x 228 ops/sec Â±5.49% (60 runs sampled) css =\u0026gt; table_cell_id_class_and_direct_desc x 373 ops/sec Â±4.20% (61 runs sampled) xpath =\u0026gt; table_cell_id_class_and_direct_desc x 247 ops/sec Â±7.08% (50 runs sampled) css =\u0026gt; table_cell_traversing x 395 ops/sec Â±7.69% (51 runs sampled) xpath =\u0026gt; table_cell_traversing x 212 ops/sec Â±9.45% (60 runs sampled) css =\u0026gt; table_cell_traversing_and_direct_desc x 530 ops/sec Â±3.74% (61 runs sampled) xpath =\u0026gt; table_cell_traversing_and_direct_desc x 377 ops/sec Â±8.93% (50 runs sampled)   Edge Chromium Edge Chromium | Linux Linux not supported\nEdge Chromium | Windows  Rapport graphique\n Log benchmark-js  Output css =\u0026gt; nested_sibling_traversal x 165 ops/sec Â±1.68% (80 runs sampled) xpath =\u0026gt; nested_sibling_traversal x 159 ops/sec Â±1.80% (79 runs sampled) css =\u0026gt; nested_sibling_traversal_by_class x 198 ops/sec Â±1.37% (82 runs sampled) xpath =\u0026gt; nested_sibling_traversal_by_class x 111 ops/sec Â±1.60% (74 runs sampled) css =\u0026gt; table_header_id_and_class x 201 ops/sec Â±1.42% (81 runs sampled) xpath =\u0026gt; table_header_id_and_class x 173 ops/sec Â±1.48% (80 runs sampled) css =\u0026gt; table_header_id_class_and_direct_desc x 207 ops/sec Â±1.42% (80 runs sampled) xpath =\u0026gt; table_header_id_class_and_direct_desc x 176 ops/sec Â±1.25% (81 runs sampled) css =\u0026gt; table_header_traversing x 201 ops/sec Â±1.29% (82 runs sampled) xpath =\u0026gt; table_header_traversing x 175 ops/sec Â±1.67% (80 runs sampled) css =\u0026gt; table_header_traversing_and_direct_desc x 205 ops/sec Â±1.20% (78 runs sampled) xpath =\u0026gt; table_header_traversing_and_direct_desc x 178 ops/sec Â±1.90% (82 runs sampled) css =\u0026gt; table_cell_id_and_class x 201 ops/sec Â±1.59% (78 runs sampled) xpath =\u0026gt; table_cell_id_and_class x 125 ops/sec Â±7.14% (74 runs sampled) css =\u0026gt; table_cell_id_class_and_direct_desc x 206 ops/sec Â±1.13% (79 runs sampled) xpath =\u0026gt; table_cell_id_class_and_direct_desc x 131 ops/sec Â±2.08% (76 runs sampled) css =\u0026gt; table_cell_traversing x 201 ops/sec Â±1.36% (80 runs sampled) xpath =\u0026gt; table_cell_traversing x 117 ops/sec Â±2.00% (77 runs sampled) css =\u0026gt; table_cell_traversing_and_direct_desc x 203 ops/sec Â±1.55% (79 runs sampled) xpath =\u0026gt; table_cell_traversing_and_direct_desc x 147 ops/sec Â±2.04% (76 runs sampled)  Edge Chromium | MacOS  Rapport graphique\n Log benchmark-js  Output css =\u0026gt; nested_sibling_traversal x 147 ops/sec Â±2.61% (69 runs sampled) xpath =\u0026gt; nested_sibling_traversal x 113 ops/sec Â±10.29% (65 runs sampled) css =\u0026gt; nested_sibling_traversal_by_class x 134 ops/sec Â±9.37% (58 runs sampled) xpath =\u0026gt; nested_sibling_traversal_by_class x 102 ops/sec Â±2.13% (71 runs sampled) css =\u0026gt; table_header_id_and_class x 189 ops/sec Â±1.07% (71 runs sampled) xpath =\u0026gt; table_header_id_and_class x 160 ops/sec Â±1.64% (72 runs sampled) css =\u0026gt; table_header_id_class_and_direct_desc x 188 ops/sec Â±1.55% (70 runs sampled) xpath =\u0026gt; table_header_id_class_and_direct_desc x 155 ops/sec Â±1.51% (69 runs sampled) css =\u0026gt; table_header_traversing x 191 ops/sec Â±1.44% (71 runs sampled) xpath =\u0026gt; table_header_traversing x 153 ops/sec Â±1.82% (66 runs sampled) css =\u0026gt; table_header_traversing_and_direct_desc x 178 ops/sec Â±6.21% (69 runs sampled) xpath =\u0026gt; table_header_traversing_and_direct_desc x 152 ops/sec Â±2.05% (69 runs sampled) css =\u0026gt; table_cell_id_and_class x 191 ops/sec Â±2.11% (71 runs sampled) xpath =\u0026gt; table_cell_id_and_class x 112 ops/sec Â±2.01% (66 runs sampled) css =\u0026gt; table_cell_id_class_and_direct_desc x 177 ops/sec Â±2.53% (60 runs sampled) xpath =\u0026gt; table_cell_id_class_and_direct_desc x 120 ops/sec Â±2.13% (56 runs sampled) css =\u0026gt; table_cell_traversing x 183 ops/sec Â±1.78% (57 runs sampled) xpath =\u0026gt; table_cell_traversing x 94.47 ops/sec Â±4.05% (57 runs sampled) css =\u0026gt; table_cell_traversing_and_direct_desc x 193 ops/sec Â±1.17% (56 runs sampled) xpath =\u0026gt; table_cell_traversing_and_direct_desc x 140 ops/sec Â±1.73% (54 runs sampled)  Safari | MacOS  Rapport graphique\n Log benchmark-js  Output css =\u0026gt; nested_sibling_traversal x 267 ops/sec Â±22.46% (71 runs sampled) xpath =\u0026gt; nested_sibling_traversal x 247 ops/sec Â±14.10% (63 runs sampled) css =\u0026gt; nested_sibling_traversal_by_class x 145 ops/sec Â±16.60% (36 runs sampled) xpath =\u0026gt; nested_sibling_traversal_by_class x 156 ops/sec Â±14.84% (60 runs sampled) css =\u0026gt; table_header_id_and_class x 372 ops/sec Â±2.14% (73 runs sampled) xpath =\u0026gt; table_header_id_and_class x 357 ops/sec Â±0.75% (74 runs sampled) css =\u0026gt; table_header_id_class_and_direct_desc x 364 ops/sec Â±12.31% (69 runs sampled) xpath =\u0026gt; table_header_id_class_and_direct_desc x 373 ops/sec Â±3.05% (71 runs sampled) css =\u0026gt; table_header_traversing x 398 ops/sec Â±0.70% (69 runs sampled) xpath =\u0026gt; table_header_traversing x 329 ops/sec Â±9.59% (69 runs sampled) css =\u0026gt; table_header_traversing_and_direct_desc x 365 ops/sec Â±5.18% (65 runs sampled) xpath =\u0026gt; table_header_traversing_and_direct_desc x 326 ops/sec Â±9.83% (68 runs sampled) css =\u0026gt; table_cell_id_and_class x 356 ops/sec Â±3.86% (70 runs sampled) xpath =\u0026gt; table_cell_id_and_class x 232 ops/sec Â±4.65% (67 runs sampled) css =\u0026gt; table_cell_id_class_and_direct_desc x 349 ops/sec Â±3.87% (69 runs sampled) xpath =\u0026gt; table_cell_id_class_and_direct_desc x 251 ops/sec Â±4.13% (69 runs sampled) css =\u0026gt; table_cell_traversing x 349 ops/sec Â±3.67% (74 runs sampled) xpath =\u0026gt; table_cell_traversing x 222 ops/sec Â±4.97% (69 runs sampled) css =\u0026gt; table_cell_traversing_and_direct_desc x 349 ops/sec Â±3.61% (71 runs sampled) xpath =\u0026gt; table_cell_traversing_and_direct_desc x 282 ops/sec Â±4.20% (70 runs sampled)  IE | Windows  Rapport graphique\n Log benchmark-js  Output css =\u0026gt; nested_sibling_traversal x 11.95 ops/sec Â±2.58% (59 runs sampled) xpath =\u0026gt; nested_sibling_traversal x 16.89 ops/sec Â±2.87% (79 runs sampled) css =\u0026gt; nested_sibling_traversal_by_class x 12.08 ops/sec Â±1.37% (59 runs sampled) xpath =\u0026gt; nested_sibling_traversal_by_class x 7.23 ops/sec Â±1.49% (39 runs sampled) css =\u0026gt; table_header_id_and_class x 11.93 ops/sec Â±1.44% (59 runs sampled) xpath =\u0026gt; table_header_id_and_class x 17.24 ops/sec Â±1.03% (80 runs sampled) css =\u0026gt; table_header_id_class_and_direct_desc x 12.11 ops/sec Â±1.27% (60 runs sampled) xpath =\u0026gt; table_header_id_class_and_direct_desc x 17.17 ops/sec Â±1.20% (80 runs sampled) css =\u0026gt; table_header_traversing x 12.30 ops/sec Â±1.20% (60 runs sampled) xpath =\u0026gt; table_header_traversing x 17.39 ops/sec Â±0.65% (73 runs sampled) css =\u0026gt; table_header_traversing_and_direct_desc x 12.47 ops/sec Â±1.05% (61 runs sampled) xpath =\u0026gt; table_header_traversing_and_direct_desc x 17.47 ops/sec Â±0.90% (81 runs sampled) css =\u0026gt; table_cell_id_and_class x 12.31 ops/sec Â±1.25% (61 runs sampled) xpath =\u0026gt; table_cell_id_and_class x 17.56 ops/sec Â±0.84% (45 runs sampled) css =\u0026gt; table_cell_id_class_and_direct_desc x 12.40 ops/sec Â±1.21% (61 runs sampled) xpath =\u0026gt; table_cell_id_class_and_direct_desc x 17.46 ops/sec Â±0.95% (47 runs sampled) css =\u0026gt; table_cell_traversing x 12.36 ops/sec Â±1.47% (61 runs sampled) xpath =\u0026gt; table_cell_traversing x 10.77 ops/sec Â±1.45% (54 runs sampled) css =\u0026gt; table_cell_traversing_and_direct_desc x 12.55 ops/sec Â±1.21% (61 runs sampled) xpath =\u0026gt; table_cell_traversing_and_direct_desc x 13.05 ops/sec Â±1.74% (63 runs sampled)  Conclusion Voici les conclusions issues de ce benchmark:\n Les sÃ©lecteurs CSS sont lÃ©gÃ¨rement plus rapide que ceux du Xpath, la seule exception en faveur d\u0026rsquo;Xpath et sans surprise le vieux navigateur IE Les sÃ©lecteurs CSS (et parfois Xpath) sont beaucoup plus rapide avec le navigateur Firefox notamment sur le systÃ¨me d\u0026rsquo;exploitation Linux et Windows, un peu moins rapide sur MacOS ( a priori grÃ¢ce Ã  l\u0026rsquo;intÃ©gration du moteur Quantum CSS) Certains sÃ©lecteurs CSS sont plus rapide avec Safari sur MacOS Les sÃ©lecteurs CSS et Xpath sont largement moins rapide sur le vieux navigateur IE Cette diffÃ©rence de performance Css Vs. Xpath est trÃ¨s loin d\u0026rsquo;Ãªtre un Ã©lÃ©ment essentiel pour rÃ©duire le temps d\u0026rsquo;exÃ©cution de vos tests UI  Vous Ãªtes maintenant bien armÃ©s avec des data Ã  jour pour pouvoir choisir la meilleure stratÃ©gie de localisation webdriver.\nSi vous avez aimÃ© cet article, n\u0026rsquo;hÃ©sitez pas Ã  le partager !\n","permalink":"https://blog.expandtesting.com/webdriver/css-vs-xpath/","tags":["AUTOMATISATION","BENCHMARKS","WEBDRIVER","SELENIUM","WEBDRIVERIO"],"title":"Benchmark Css Vs. Xpath "},{"categories":["Automatisation","Strategie"],"contents":"Introduction Comme vous le savez les outils d\u0026rsquo;automatisation des tests UI comme Selenium, WebdriverIO, etc. utilisent le mÃªme principe de fonctionnement et partagent les mÃªmes problÃ©matiques.\nTous les tests rÃ©alisÃ©s avec un outil webdriver est basÃ© principalement sur le DOM et utilisent les sÃ©lecteurs web pour interagir avec l'interface utilisateur via des drivers (chromedriver, geckodriver, etc.).\nCette rÃ©alitÃ© reprÃ©sente un vrai problÃ¨me de dÃ©pendance entre les tests et la structure de l\u0026rsquo;interface utilisateur, un changement ainsi au niveau de l\u0026rsquo;UI implique une mise a jour a faire au niveau des tests.\nIl est donc essentiel de choisir soigneusement la meilleure stratÃ©gie pour rÃ©sister au changement de l'interface utilisateur afin de minimiser les coÃ»ts de maintenances, d'augmenter la fiabilitÃ© des tests basÃ©s sur l\u0026rsquo;UI, d\u0026rsquo;avoir un pipeline plus stable et donc de livrer le plus rapidement possible.\nDans cet article je vais vous prÃ©senter les localisateurs d\u0026rsquo;Ã©lÃ©ments web supportÃ©s officiellement par le W3C, Ã©valuer leurs inconvÃ©nients et leurs avantages afin de vous aider Ã  choisir la meilleure stratÃ©gie pour mener Ã  bien votre projet d\u0026rsquo;automatisation UI.\nLe problÃ¨me Sans trop entrer dans les dÃ©tails techniques de chaque outil, framework ou api, le principe de fonctionnement simplifiÃ© est le suivant:\n1. SÃ©lection (localisation) de l'Ã©lÃ©ment web (bouton, lien, menu dÃ©roulant, etc.)\n2. Interaction avec l\u0026rsquo;Ã©lÃ©ment sÃ©lectionnÃ© (simple clique, saisie d\u0026rsquo;un texte, rÃ©cupÃ©ration de texte, etc.)\n3. VÃ©rification des rÃ©sultats Ã  travers des assertions\nSouvent les tests Ã©chouent durant l\u0026rsquo;Ã©tape de sÃ©lection (localisation) de l\u0026rsquo;Ã©lÃ©ment web et vous perdrez donc le temps dans l\u0026rsquo;analyse des messages d\u0026rsquo;erreur de type:\n Not found exception An element could not be located on the page Unable to locate element NoSuchElementError X exception  AprÃ¨s analyse des erreurs, vous vous rendez compte qu\u0026rsquo;une simple balise html div Ã  Ã©tÃ© supprimÃ©e par les dÃ©veloppeurs ou la valeur de l'ID Ã  Ã©tÃ© mise Ã  jour de: \u0026lt;input type=\u0026quot;text\u0026quot; id=\u0026quot;user\u0026quot; name=\u0026quot;user\u0026quot;\u0026gt; a \u0026lt;input type=\u0026quot;text\u0026quot; id=\u0026quot;username\u0026quot; name=\u0026quot;username\u0026quot;\u0026gt;\nCette problÃ©matique se multiplie notamment si les automaticiens et les dÃ©veloppeurs ne sont pas dans la mÃªme Ã©quipe et / ou sans rÃ©elle collaboration.\nSans surprise, les rÃ©sultats sont les suivants :\n Tests non fiables (Flaky Tests) CoÃ»t de maintenance Ã©levÃ© Pipeline de livraison lent Perte de motivation  La solution L\u0026rsquo;Ã©lÃ©ment essentiel de la solution est la capacitÃ© d'identifier le bon localisateur / sÃ©lecteur (locator).\nQu\u0026rsquo;est ce qu\u0026rsquo;un bon localisateur ? IndÃ©pendamment du dÃ©bat sur Xpath vs CSS, un bon localisateur possÃ¨de les caractÃ©ristiques suivantes:\n Unique Descriptif Faible probabilitÃ© de changement  Les diffÃ©rentes stratÃ©gies webdriver Nous passons maintenant Ã  l\u0026rsquo;analyse des diffÃ©rentes stratÃ©gies supportÃ©s par le W3C afin d\u0026rsquo;identifier la meilleure stratÃ©gie possible.\nPetit rappel de la liste des des stratÃ©gies officielles du W3C:\n CSS selector Link text selector Partial link text selector Tag name XPath selector  Pour garder le focus sur l\u0026rsquo;essentiel et afin d\u0026rsquo;Ã©viter d\u0026rsquo;entrer dans les dÃ©tails de chaque stratÃ©gie qui ne sont pas nÃ©cessairement utiles, les diffÃ©rentes stratÃ©gies seront classÃ©s en grandes catÃ©gories:\n Mauvaise: Link Text, Partial Link Text et Tag Name Bonne: CSS et Xpath TrÃ¨s bonne: ID et Class Excellente: Attributs HTML personnalisÃ©s data-* avec les sÃ©lecteurs CSS  Mauvaise: Link Text, Partial Link Text et Tag Name Les sÃ©lecteurs Link Text, Partial Link Text, et Tag Name ont le mÃªme problÃ¨me, c\u0026rsquo;est le manque de rÃ©sistance au changement qui peut avoir une page ou un composant html durant le cycle de vie d\u0026rsquo;un projet et donc les flaky tests !\nVoici un simple exemple pour mieux comprendre la problÃ©matique:\nSupposons que nous avons le code HTML suivant:\n\u0026lt;h1 class=\u0026quot;heading\u0026quot;\u0026gt;Welcome to the-internet\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Available Examples\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/upload\u0026quot;\u0026gt;File Upload\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/floating_menu\u0026quot;\u0026gt;Floating Menu\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/forgot_password\u0026quot;\u0026gt;Reset Password\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;  Maintenant pour automatiser notre scÃ©nario de test forgot_password, nous avons besoin de cliquer sur le lien /forgot_password, la solution la plus simple pour sÃ©lectionner l\u0026rsquo;Ã©lÃ©ment web c\u0026rsquo;est d\u0026rsquo;utiliser la stratÃ©gie Link Text avec l\u0026rsquo;instruction selenium webdriver suivante await driver.findElement(By.linkText(\u0026quot;Reset Password\u0026quot;)).click()\nBien, le test (click) devrait fonctionner !\nMaintenant le dÃ©veloppeur repasse sur le code HTML, il trouve que Reset Password n\u0026rsquo;est pas trop sÃ©mantique et il serait super bien de changer le texte Reset Password par Forgot Password, un simple changement qui ne coÃ»te rien !\nSuite Ã  cette modification, nous avons donc le nouveau code html suivant:\n\u0026lt;h1 class=\u0026quot;heading\u0026quot;\u0026gt;Welcome to the-internet\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Available Examples\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/upload\u0026quot;\u0026gt;File Upload\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/floating_menu\u0026quot;\u0026gt;Floating Menu\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;/forgot_password\u0026quot;\u0026gt;Forgot Password\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;  Nous exÃ©cutons Ã  nouveau le mÃªme test forgot_password pour vÃ©rifier si tout va bien !\nExÃ©cution des tests en cours â€¦\nBoom !\nLe test ne passe plus!, Ona la fameuse exception NoSuchElementException.\nVous devez comprendre maintenant que cette stratÃ©gie n\u0026rsquo;est pas la meilleure faÃ§on de faire ce travail, une telle stratÃ©gie axÃ©e sur le contenu est sans doute une mauvaise stratÃ©gie !\nUtilisez-les uniquement si vous avez un besoin spÃ©cifique et qu\u0026rsquo;aucune autre option n\u0026rsquo;est disponible !\nBonne: CSS et Xpath IndÃ©pendamment du dÃ©bat sur Xpath vs CSS, ces deux localisateurs sont conceptuellement trÃ¨s similaires, c\u0026rsquo;est pour cela je les ai rassemblÃ©s pour cette catÃ©gorie.\nXPath dispose la possibilitÃ© de sÃ©lectionner des Ã©lÃ©ments parents, cette option est particuliÃ¨rement intÃ©ressante pour certains scÃ©narios et CSS dispose une syntaxe relativement simple !\nQuelques points d\u0026rsquo;attention:\n  Ces types de localisateurs avec des combinaisons de nom de balise, d\u0026rsquo;Ã©lÃ©ments descendants, de classe CSS (ou d\u0026rsquo;attribut d\u0026rsquo;Ã©lÃ©ment) rendent le modÃ¨le de sÃ©lection strict ou lÃ¢che, ce qui signifie que de petites modifications HTML l\u0026rsquo;invalideront et perdront le sens qu\u0026rsquo;il pourrait correspondre Ã  plus d\u0026rsquo;un Ã©lÃ©ment HTML.\n  Lors de l\u0026rsquo;Ã©criture d\u0026rsquo;un localisateur Xpath ou CSS, il s\u0026rsquo;agit de trouver l\u0026rsquo;Ã©quilibre entre strict et lÃ¢che:\n Suffisamment stable et durable pour rÃ©sister au changement HTML Suffisamment strict pour Ã©chouer lorsque l'application Ã©choue.    XPath ne fonctionne pas correctement dans Internet Explorer.\n  Les sÃ©lecteurs XPath absolus ne sont pas bons.\n  TrÃ¨s bonne: ID et Class L'ID est la stratÃ©gie de localisation la plus sÃ»re et doit toujours Ãªtre votre premier choix.\nSelon les normes du W3C, l\u0026rsquo;ID est sensÃ© d'Ãªtre unique dans la page (by design), il est Ã©galement indÃ©pendant du type et de l\u0026rsquo;emplacement de l\u0026rsquo;Ã©lÃ©ment web.\nLes navigateurs possÃ¨dent Ã©galement des mÃ©thodes efficaces pour rÃ©cupÃ©rer un objet sur une page en utilisant leurs identifiants.\nComme l'ID, l\u0026rsquo;utilisation de l\u0026rsquo;attribut Class a l\u0026rsquo;avantage d\u0026rsquo;Ãªtre moins impactÃ© par les changements structurels de la page web et donc plus stable.\nLorsque vous utilisez les deux stratÃ©gies ID et Class, vous cibler directement des Ã©lÃ©ments spÃ©cifiques au lieu de vous fier Ã  la structure de la page.\nBien Ã©videmment si le dÃ©veloppeur modifier un ID ou un l\u0026rsquo;attribut Class qui est dÃ©jÃ  utilisÃ© dans le framework de tests UI automatisÃ©s cela aura un impact sur vos scÃ©nario de test tests.\nComme je l\u0026rsquo;ai toujours dit, l\u0026rsquo;automatisation commence par la communication, discuter avec les dÃ©veloppeurs c\u0026rsquo;est toujours important et nÃ©cessaire.\nExcellente: Attributs data-* avec les sÃ©lecteurs CSS Si vous avez la possibilitÃ© de collaborer avec les dÃ©veloppeurs, la meilleure solution que je vous recommande trÃ¨s fortement est d'ajouter des attributs HTML personnalisÃ©s pour aider Ã  identifier les Ã©lÃ©ments que vous devez sÃ©lectionner.\nC\u0026rsquo;est une pratique populaire pour industrialiser les tests d\u0026rsquo;acceptation basÃ©s sur l\u0026rsquo;interface utilisateur, cette stratÃ©gie peut vraiment vous aider Ã  avoir des tests UI plus stable et de minimiser les coÃ»ts de maintenance.\nHTML5 a introduit un type d\u0026rsquo;attribut data-* formel dont nous pouvons tirer parti dans nos tests UI.\nC\u0026rsquo;est trÃ¨s simple Ã  mettre en place, il suffit d\u0026rsquo;ajouter un attribut personnalisÃ© Ã  vos composants HTML.\nCet attribut sera utilisÃ© uniquement pour localiser les Ã©lÃ©ments web pour les besoins de tests d\u0026rsquo;acceptation au niveau de l\u0026rsquo;UI.\nVoici un simple exemple d\u0026rsquo;utilisation des attributs HTML personnalisÃ©s (data-testid):\nusername \u0026lt;form name=\u0026quot;login\u0026quot; id=\u0026quot;login\u0026quot; action=\u0026quot;/authenticate\u0026quot; method=\u0026quot;post\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;large-6 small-12 columns\u0026quot;\u0026gt; \u0026lt;label for=\u0026quot;username\u0026quot;\u0026gt;Username\u0026lt;/label\u0026gt; \u0026lt;input data-testid=\u0026quot;username\u0026quot; type=\u0026quot;text\u0026quot; name=\u0026quot;username\u0026quot; id=\u0026quot;username\u0026quot; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;large-6 small-12 columns\u0026quot;\u0026gt; \u0026lt;label for=\u0026quot;password\u0026quot;\u0026gt;Password\u0026lt;/label\u0026gt; \u0026lt;input data-testid=\u0026quot;password\u0026quot; type=\u0026quot;password\u0026quot; name=\u0026quot;password\u0026quot; id=\u0026quot;password\u0026quot; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button data-testid=\u0026quot;login-submit\u0026quot; class=\u0026quot;radius\u0026quot; type=\u0026quot;submit\u0026quot;\u0026gt; \u0026lt;i class=\u0026quot;fa fa-2x fa-sign-in\u0026quot;\u0026gt; Login\u0026lt;/i\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt;  Dans cet exemple (login), j\u0026rsquo;ai ajoutÃ© un attribut data-testid Ã  tous les Ã©lÃ©ments web utilisÃ©s par les tests UI.\nCe n\u0026rsquo;Ã©tait pas forcÃ©ment nÃ©cessaire d\u0026rsquo;ajouter les attributs HTML personnalisÃ©s (car nous avons dÃ©jÃ  les ID username, password pour les champs username, password et nous avons aussi la classe radius pour le bouton login, mais je l\u0026rsquo;ai fait exprÃ¨s ðŸ˜€\nVous vous posez peut-Ãªtre la question \u0026ldquo;Pourquoi ?\u0026rdquo;\nLe vÃ©ritable avantage de cela est qu\u0026rsquo;il est beaucoup moins susceptible d\u0026rsquo;Ãªtre modifiÃ© au cours de la durÃ©e de vie du projet.\nLes autres attributs ID, name, class, etc. peuvent Ãªtre changÃ©s par les dÃ©veloppeurs et les raisons sont multiples:\n Application des nouvelles rÃ¨gles de nommage Changement de style CSS Etc.  Mais un attribut personnalisÃ© nommÃ© avec data-testid est beaucoup moins susceptible d\u0026rsquo;Ãªtre modifiÃ© sans avertissement.\nNous allons maintenant compter sur nos attributs HTML personnalisÃ©s (data-testid) pour sÃ©lectionner d\u0026rsquo;une maniÃ¨re simple et efficace les Ã©lÃ©ments web pour nos tests UI.\nNous pouvons donc utiliser les localisateurs suivants pour sÃ©lectionner les Ã©lÃ©ments nÃ©cessaires pour notre page login:\n [data-testid=\u0026quot;username\u0026quot;] [data-testid=\u0026quot;password\u0026quot;] [data-testid=\u0026quot;login-submit\u0026quot;]  Mais pourquoi utiliser les sÃ©lecteurs CSS ?\nC\u0026rsquo;est simple, quand vous rencontrez une personne qui prÃ©fÃ¨re parler anglais, le plus simple est de parler anglais avec lui !\nC\u0026rsquo;est le mÃªme principe ici, les dÃ©veloppeurs d\u0026rsquo;une maniÃ¨re gÃ©nÃ©rale prÃ©fÃ¨rent la simplicitÃ© du CSS.\nConclusion Le choix d\u0026rsquo;une stratÃ©gie de localisation est un Ã©lÃ©ments essentiel au succÃ¨s de l\u0026rsquo;automatisation de tests d\u0026rsquo;acceptation UI.\nIl faut garder Ã  l\u0026rsquo;esprit qu\u0026rsquo;un bon localisateur possÃ¨de les caractÃ©ristiques:\n Unique Descriptif Faible probabilitÃ© de changement  Assurez-vous de:\n Commencez par les deux stratÃ©gies ID et Class Utilisez les sÃ©lecteurs CSS (ou XPath) lorsque vous devez parcourir plusieurs Ã©lÃ©ments Discutez avec les dÃ©veloppeurs pour trouver la meilleure solution possible  L\u0026rsquo;utilisation des attributs data-* avec les sÃ©lecteurs CSS reste la meilleure solution pour minimiser les coÃ»ts de maintenance et limiter les flaky tests.\nSi vous avez aimÃ© cet article, n\u0026rsquo;hÃ©sitez pas Ã  le partager !\n","permalink":"https://blog.expandtesting.com/webdriver/strategie-localisation-webdriver/","tags":["AUTOMATISATION","STRATEGIE","WEBDRIVER","SELENIUM","WEBDRIVERIO"],"title":"Comment choisir une stratÃ©gie de localisation Webdriver ?"},{"categories":["Automatisation","Design Patterns"],"contents":"Introduction Le pattern Page Object Model est un des modÃ¨les de conception d'automatisation de test les plus largement utilisÃ©s.\nLa plupart des ingÃ©nieurs QA/SDET (Software Development Engineer in Test) ont Ã  un moment donnÃ© utilisÃ© une variante du pattern page object model.\nCependant, il est souvent trÃ¨s mal compris et mal implÃ©mentÃ©, ce qui peut entraÃ®ner un code d\u0026rsquo;automatisation de test ultra fragile et difficile Ã  maintenir.\nDans cet article, jâ€™aborde les concepts clÃ©s du pattern page object model afin de le rendre plus clair et plus facile Ã  comprendre pour les ingÃ©nieurs automaticiens de la communautÃ© francophone.\nJ\u0026rsquo;aimerais commencer par deux citations, l\u0026rsquo;une de Simon Stewart le crÃ©ateur de Selenium Webdriver et la seconde est une rÃ©flexion de Martin Fowler\n  If you have WebDriver APIs in your test methods, Youâ€™re Doing It Wrong.  \u0026ndash; Simon Stewart   A page object wraps an HTML page, or fragment, with an application-specific API, allowing you to manipulate page elements without digging around in the HTML. A page object should also provide an interface that\u0026rsquo;s easy to program to and hides the underlying widgetry in the window page. The page object should encapsulate the mechanics required to find and manipulate the data in the page itself. A good rule of thumb is to imagine changing the concrete page -in which case the page object interface shouldn\u0026rsquo;t change.  \u0026ndash; Martin Fowler Le problÃ¨me Lorsque vous Ã©crivez des tests fonctionnels Ã  l\u0026rsquo;aide de Selenium Webdriver (ou Ã  l\u0026rsquo;aide d\u0026rsquo;un autre framework), la grosse partie du travail consiste Ã  gÃ©rer des interactions avec l'interface utilisateur via l'API Webdriver.\nLa plupart du temps c\u0026rsquo;est le scenario classique suivant :\n Initialisation du contexte RÃ©cupÃ©ration des Ã©lÃ©ments web Interactions avec les Ã©lÃ©ments web (saisie d\u0026rsquo;un texte, clique sur un Ã©lÃ©ment, rÃ©cupÃ©ration de texte, etc.) VÃ©rification des rÃ©sultats Ã  travers diffÃ©rentes assertions  ConsidÃ©rez l\u0026rsquo;exemple suivant (Un test de login trÃ¨s basique avec Selenium Webdriver en JavaScript):\nawait driver.get(\u0026quot;http://the-internet.herokuapp.com/login\u0026quot;); await driver.findElement({ id: \u0026quot;username\u0026quot; }).sendKeys(\u0026quot;tomsmith\u0026quot;); await driver.findElement({ id: \u0026quot;password\u0026quot; }).sendKeys(\u0026quot;SuperSecretPassword!\u0026quot;); await driver.findElement({ css: \u0026quot;button\u0026quot; }).click(); assert(await driver.findElement({ css: \u0026quot;.flash.success\u0026quot; }).isDisplayed());  Comme vous l\u0026rsquo;avez certainement constatÃ©, ceci est un simple test avec des actions limitÃ©es :\n Chargement de l\u0026rsquo;URL du login Saisie du login Saisie du mot de passe Clique sur le bouton login VÃ©rification de l\u0026rsquo;affichage dâ€™un message de succÃ¨s  Et mÃªme avec un test trÃ¨s simple comme celui-ci, la lisibilitÃ© est trÃ¨s rÃ©duite. Il y a plusieurs utilisations de l\u0026rsquo;API Webdriver qui obscurcit le but principal du test.\nAvec une simple analyse on peut identifier quelques limites et problÃ¨mes pour cette approche:\n Il n\u0026rsquo;y a pas de sÃ©paration claire entre les mÃ©thodes de test et les localisateurs de l\u0026rsquo;application (locators). Ils sont tous dans une seule mÃ©thode. Si l\u0026rsquo;application change ses identifiants ou sa structure graphique, les tests doivent changer Ã©galement. Imaginez un scÃ©nario de plusieurs tests qui nÃ©cessitent l\u0026rsquo;utilisation de cette fonctionnalitÃ© de login. Le mÃªme code de connexion sera du coup rÃ©pÃ©tÃ© encore et encore dans chaque test. Tout changement dans l\u0026rsquo;interface utilisateur signifie que tous les tests devront Ãªtre modifiÃ©s Ã©galement. Le code ci-dessus n\u0026rsquo;est pas trÃ¨s lisible, nâ€™est pas facilement maintenable, la rÃ©utilisable est trÃ¨s limitÃ©e et laisse la porte ouverte pour la duplication de code (Se sont exactement les problÃ¨mes traitÃ©s par les concepts du pattern Page Object Model).  La solution Sans chercher Ã  Â«rÃ©inventer la roueÂ», la solution est tout simplement l\u0026rsquo;utilisation du pattern page object model\nQu\u0026rsquo;est-ce que le pattern page object model ? Ce pattern est un modÃ¨le de conception trÃ¨s populaire dans le contexte de l\u0026rsquo;automatisation des tests UI pour amÃ©liorer la maintenance des tests et rÃ©duire la duplication de code.\nIl s\u0026rsquo;agit d\u0026rsquo;un modÃ¨le de langage neutre pour reprÃ©senter une page complÃ¨te ou une partie d\u0026rsquo;une page de maniÃ¨re orientÃ©e objet. Et nous les utilisons pour modÃ©liser l\u0026rsquo;interface utilisateur de l\u0026rsquo;application.\nAvec ce pattern, les objets de la page exposent des mÃ©thodes qui reflÃ¨tent les actions ou les Ã©lÃ©ments graphiques qu\u0026rsquo;un utilisateur peut faire et voir sur une page web.\nIl cache Ã©galement les dÃ©tails d\u0026rsquo;implÃ©mentation indiquant au navigateur comment manipuler les Ã©lÃ©ments de la page.\nEn bref, le pattern page object model encapsule les diffÃ©rents comportements d\u0026rsquo;une page.\nVos tests utilisent ensuite les mÃ©thodes exposÃ©es par cette classe (page object) chaque fois qu\u0026rsquo;ils ont besoin d\u0026rsquo;interagir avec l\u0026rsquo;interface utilisateur.\nL\u0026rsquo;avantage est que si l\u0026rsquo;interface utilisateur de la page change, les tests eux-mÃªmes n\u0026rsquo;ont pas besoin de changer, seul le code dans la page object doit changer.\nPar la suite, toutes les modifications pour prendre en charge cette nouvelle interface utilisateur se trouvent au mÃªme endroit (page object).\nUne image vaut mille mots Cette figure illustre les concepts du pattern page object model\nPourquoi utiliser le pattern page object model ? Les principales raisons sont les suivantes :\n MaintenabilitÃ© RÃ©duction ou Ã©limination de la duplication de code LisibilitÃ© des scripts RÃ©utilisabilitÃ© La scalabilitÃ© AmÃ©lioration de l'organisation du code source  ImplÃ©mentation Nous allons procÃ©der Ã©tape par Ã©tape pour la mise en Å“uvre de cette technique de page object model, ci-dessous les Ã©tapes nÃ©cessaires:\n Configuration basique de Selenium Webdriver Analyse de l\u0026rsquo;application sous test (AUT*) Ã‰criture de page objects Ã‰criture de tests  Pour Ãªtre plus prÃ©cis ce n\u0026rsquo;est pas exactement la mÃ©thode que j\u0026rsquo;utilise tous les jours, car je commence par l\u0026rsquo;Ã©criture des tests ce qui me permet de justifier chaque variable, chaque ligne de code et m\u0026rsquo;aider Ã  faire du clean code. Mais c\u0026rsquo;est un sujet que je n\u0026rsquo;aborderais pas ici pour garder le focus sur le pattern page object model.\nConfiguration basique de Selenium Webdriver Externaliser le code de la gestion du cycle de vie du driver (Webdrivier) dans une classe ou un script sÃ©parÃ© (Separation of concerns) est une excellente idÃ©e que je recommande trÃ¨s fortement.\nIci dans mon cas j\u0026rsquo;utile mochajs, j\u0026rsquo;ai mis le code de la gestion du cycle de vie du driver dans les hooks mocha beforeEach et afterEach.\nLe pattern Driver Factory est Ã©galement utilisÃ© pour la gestion de plusieurs types de navigateurs mais ce n\u0026rsquo;est pas l\u0026rsquo;objet de l\u0026rsquo;article.\nconst DriverFactory = require(\u0026quot;./driver-factory\u0026quot;); const driverFactory = new DriverFactory(); beforeEach(async function () { const testName = this.currentTest.fullTitle(); this.driver = await driverFactory.build(testName); }); afterEach(async function () { await driverFactory.quit(); });  Analyse de l\u0026rsquo;application sous test (AUT*) AUT*: Application Under Test\nDans cet article j\u0026rsquo;ai utilisÃ© l\u0026rsquo;application the-internet et principalement la page login avec deux scenarios simples :\n Cas passant\nLogin avec les informations correctes (login et mot de passe)\n Cas non-passant\nEchec de login avec des informations incorrectes (login et mot de passe incorrect)\n  AprÃ¨s une petite analyse j\u0026rsquo;ai pu identifie que le message qu\u0026rsquo;indique le succÃ¨s ou l\u0026rsquo;Ã©chec du login ne fait pas partie de la page login, ni de la page cible une fois la connexion est rÃ©ussie secure page, j\u0026rsquo;ai donc dÃ©cidÃ© de se limiter Ã  la page login, gÃ©rer le message dans cette mÃªme page et de n\u0026rsquo;est pas crÃ©er le model page object pour la page secure, c\u0026rsquo;est largement suffisant pour cet exemple.\nÃ‰criture de Page objects Page object Login (Classe LoginPage) Ceci est le code de la classe page object login (LoginPage):\nconst BasePage = require(\u0026quot;./BasePage\u0026quot;); const LOGIN_FORM = { id: \u0026quot;login\u0026quot; }; const USERNAME_INPUT = { id: \u0026quot;username\u0026quot; }; const PASSWORD_INPUT = { id: \u0026quot;password\u0026quot; }; const SUBMIT_BUTTON = { css: \u0026quot;button\u0026quot; }; const SUCCESS_MESSAGE = { css: \u0026quot;.flash.success\u0026quot; }; const FAILURE_MESSAGE = { css: \u0026quot;.flash.error\u0026quot; }; class LoginPage extends BasePage { constructor(driver) { super(driver); } async load() { await this.visit(\u0026quot;/login\u0026quot;); if (!(await this.isDisplayed(LOGIN_FORM, 1000))) throw new Error(\u0026quot;Login form not loaded\u0026quot;); } async authenticate(username, password) { await this.type(USERNAME_INPUT, username); await this.type(PASSWORD_INPUT, password); await this.click(SUBMIT_BUTTON); } successMessagePresent() { return this.isDisplayed(SUCCESS_MESSAGE, 1000); } failureMessagePresent() { return this.isDisplayed(FAILURE_MESSAGE, 1000); } } module.exports = LoginPage;  Base page object (Classe BasePage) const Until = require(\u0026quot;selenium-webdriver\u0026quot;).until; const config = require(\u0026quot;../configs/the-internet.config\u0026quot;); class BasePage { constructor(driver) { this.driver = driver; } async visit(url) { if (url.startsWith(\u0026quot;http\u0026quot;)) { await this.driver.get(url); } else { await this.driver.get(config.baseUrl + url); } } find(locator) { return this.driver.findElement(locator); } async click(locator) { await this.find(locator).click(); } async type(locator, inputText) { await this.find(locator).sendKeys(inputText); } async isDisplayed(locator, timeout) { if (timeout) { await this.driver.wait(Until.elementLocated(locator), timeout); await this.driver.wait( Until.elementIsVisible(this.find(locator)), timeout ); return true; } else { try { return await this.find(locator).isDisplayed(); } catch (error) { return false; } } } } module.exports = BasePage;  Ã‰criture de tests Maintenant nous avons tous les Ã©lÃ©ments nÃ©cessaires pour Ã©crire les cas de tests.\nCi-dessous le code nÃ©cessaire pour tester les deux scenarios de login, le cas passant et le cas non-passant\nrequire(\u0026quot;../support/mocha-hooks\u0026quot;); const assert = require(\u0026quot;assert\u0026quot;); const LoginPage = require(\u0026quot;../page-objects/login.page\u0026quot;); describe(\u0026quot;Verify Login\u0026quot;, function () { let login; beforeEach(async function () { login = new LoginPage(this.driver); await login.load(); }); it(\u0026quot;should be able to login with valid credentials\u0026quot;, async function () { await login.authenticate(\u0026quot;tomsmith\u0026quot;, \u0026quot;SuperSecretPassword!\u0026quot;); assert( await login.successMessagePresent(), \u0026quot;Success message not displayed\u0026quot; ); }); it(\u0026quot;should not be able to login with invalid credentials\u0026quot;, async function () { await login.authenticate(\u0026quot;invalid\u0026quot;, \u0026quot;invalid\u0026quot;); assert( await login.failureMessagePresent(), \u0026quot;Failure message not displayed\u0026quot; ); }); });  Comme vous l\u0026rsquo;avez certainement constatÃ©, on n\u0026rsquo;utilise plus l\u0026rsquo;API Webdriver, On utilise plutÃ´t les mÃ©thodes exposÃ©es par la classe page object login.\nLe code est maintenant beaucoup plus clair et nous avons plus de flexibilitÃ© pour rÃ©utiliser nos objets.\nBonnes pratiques Bien que la flexibilitÃ© soit prÃ©sente, il y a quelques rÃ¨gles de base que vous devez respecter pour maintenir votre code :\n Le model page object n\u0026rsquo;a pas besoin d\u0026rsquo;Ãªtre une page HTML entiÃ¨re, il peut aussi Ãªtre un composant (C\u0026rsquo;est le cas notamment pour les applications modernes avec les framework React, Angular, etc.) Le model page object expose uniquement les mÃ©thodes qu\u0026rsquo;un utilisateur final utiliserait pour interagir avec la page, les mÃ©thodes comme readTxtFile(), connectToDataBase(), executeSQL(), etc. ne devrait pas Ãªtre exposÃ©es au script de test. Ne crÃ©ez pas tous les objets de page en mÃªme temps, ne faites que ce dont vous avez besoin Ã  ce moment donnÃ©. Vous pouvez passer des jours (et parfois des semaines) Ã  essayer de crÃ©er des pages objects pour l'ensemble de votre application et ce serait une perte de temps. Vos page objects augmenteront lorsque de nouvelles exigences arriveront, ce qui nÃ©cessitera de nouveaux scripts de test. Les assertions n\u0026rsquo;appartiennent pas aux page objects, elles appartiennent aux scripts de test. Les methodes de la page objects ne dÃ©cident pas si un test passe ou Ã©choue. Une exception Ã  la rÃ¨gle ci-dessus est qu\u0026rsquo;il doit y avoir une seule vÃ©rification dans l\u0026rsquo;objet page et c\u0026rsquo;est pour vÃ©rifier que la page et tous les Ã©lÃ©ments importants de la page ont Ã©tÃ© chargÃ©s correctement. Cette vÃ©rification doit Ãªtre effectuÃ©e lors de l\u0026rsquo;instanciation de l\u0026rsquo;objet de page.  Conclusion En utilisant le pattern Page Object Model, vos tests deviennent plus concis et lisibles.\nVos localisateurs d\u0026rsquo;Ã©lÃ©ments web sont centralisÃ©s, ce qui facilite Ã©normÃ©ment la maintenance et la scalabilitÃ© de votre framework.\nLes changements de l\u0026rsquo;interface utilisateur n\u0026rsquo;affectent que les page objects et non les scripts de test.\nSi vous avez aimÃ© cet article, n\u0026rsquo;hÃ©sitez pas Ã  le partager !\n","permalink":"https://blog.expandtesting.com/design-patterns/page-object-model/","tags":["AUTOMATISATION","PAGE-OBJECT-MODEL","SELENIUM","UI-TESTING"],"title":"Comprendre le pattern Page Object Model"},{"categories":["Videos Concepts","Automatisation","Testing"],"contents":"Cette page est dÃ©diÃ©e exclusivement aux vidÃ©os d\u0026rsquo;illustrations des concepts du testing !\nTests unitaires sans tests d\u0026rsquo;intÃ©grations (VidÃ©o 1) L\u0026rsquo;idÃ©e derriÃ¨re cette vidÃ©o câ€™est pour vous expliquer l'importance d\u0026rsquo;avoir une stratÃ©gie d\u0026rsquo;automatisation pour distribuer les tests Ã  plusieurs niveaux (unitaires, intÃ©gration, acceptation, etc)\nJe prÃ©cise: je ne parle pas du TDD Ã  travers cette vidÃ©o et donc pas besoin de lancer un faux dÃ©bat sur le sujet â€¦\n   Tests unitaires sans tests d\u0026rsquo;intÃ©grations (VidÃ©o 2) Une autre vidÃ©o pour illustrer la mÃªme idÃ©e, en revanche le focus ici est l\u0026rsquo;importance du contexte.\n  Load, Performance testing ? Je vous laisse regarder cette vidÃ©o pour identifier le type du test (Load Testing ?, Performance Testing ?) ðŸ˜Š\nIl y a peut-Ãªtre plusieurs types pas seulement un seul type, mais donner une rÃ©ponse sans savoir le contexte n\u0026rsquo;est pas une bonne idÃ©e \u0026hellip;\n   Shift-right testing | ExpÃ©rience utilisateur Le Shift-right testing peut Ãªtre utilisÃ© pour amÃ©liorer lâ€™expÃ©rience utilisateur et apporter plus de business value\nMa rÃ©flexion sur le sujet:\n Le capteur utilisÃ© n\u0026rsquo;a pas Ã©tÃ© testÃ© dans plusieurs contextes â€¦ Le rÃ©sultat: les clients ne sont pas en mesure d\u0026rsquo;utiliser le produit convenablement\nIl est du coup important de collecter le feedback et lancer une nouvelle itÃ©ration pour apporter plus de valeur et donc l\u0026rsquo;utilitÃ© de l\u0026rsquo;utilisation du shift-right testing \u0026hellip;    ","permalink":"https://blog.expandtesting.com/videos-concepts/testing/","tags":["AUTOMATISATION","CONCEPTS","TESTING","VIDEOS"],"title":"Comprendre les concepts du testing Ã  travers les vidÃ©os d'illustrations"},{"categories":["Automatisation","Design Patterns"],"contents":"Introduction Dans mon prÃ©cÃ©dent article jâ€™ai expliquÃ© le quatriÃ¨me principe SOLID (SÃ©grÃ©gation dâ€™interface).\nNâ€™hÃ©sitez pas a dÃ©couvrir les autres principes SOLID dans cette sÃ©rie d\u0026rsquo;articles:\n SRP: ResponsabilitÃ© unique OCP: Ouvert-FermÃ© LSP: Substitution de Liskov ISP: SÃ©grÃ©gation dâ€™interface  Aujourd\u0026rsquo;hui je vous propose une explication pour le cinquiÃ¨me principe S.O.L.I.D, câ€™est le principe Â«Inversion De DÃ©pendanceÂ» (Dependency Inversion), ce principe est basÃ© sur les affirmations suivantes:\n Les modules de haut niveau ne devraient pas dÃ©pendre des modules de bas niveau, tous deux devraient dÃ©pendre dâ€™abstraction. Les abstractions ne devraient pas dÃ©pendre de dÃ©tails, ce sont les dÃ©tails qui devraient dÃ©pendre des abstractions.  On comprend mieux avec un exemple!\nUn mauvais exemple public sealed class Customer { public int Id { get; set; } public string Name { get; set; } }  public sealed class CustomerRepository { public CustomerRepository(string dbConnectionString) { // Some implementation here } public void AddCustomer(Customer customer) { // Some implementation here (database) } }  public sealed class CustomerService { private CustomerRepository _customerRepository = new CustomerRepository(\u0026quot;dbConnectionString\u0026quot;); public void Add(Customer customer) { _customerRepository.AddCustomer(customer); }  Le code est incorrect car la classe CustomerService dÃ©pend de la classe CustomerRepository et sait Ã©galement comment l\u0026rsquo;instancier.\nUn bon exemple public sealed class Customer { public int Id { get; set; } public string Name { get; set; } }  public interface ICustomerRepository { void AddCustomer(Customer customer); }  public sealed class CustomerRepository : ICustomerRepository { public CustomerRepository(string dbConnectionString) { // Some implementation here } public void AddCustomer(Customer customer) { // Some implementation here (database) } }  public sealed class CustomerService { private ICustomerRepository CustomerRepository { get; } public CustomerService(ICustomerRepository customerRepository) { CustomerRepository = customerRepository; } public void AddCustomer(Customer customer) { CustomerRepository.Add(customer); } }  Le code est correct car la classe CustomerService ne dÃ©pend que de l\u0026rsquo;interface ICustomerRepository, elle ne connaÃ®t pas l\u0026rsquo;implÃ©mentation ni comment l\u0026rsquo;instancier.\nSi vous avez aimÃ© cet article, n\u0026rsquo;hÃ©sitez pas Ã  le partager !\n","permalink":"https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-5-5-inversion-de-dependance/","tags":["AUTOMATISATION","SOLID"],"title":"Principes SOLID simplifiÃ©s (5/5): Inversion De DÃ©pendance"},{"categories":["Automatisation","Design Patterns"],"contents":"Introduction Dans mon prÃ©cÃ©dent article jâ€™ai expliquÃ© le troisiÃ¨me principe SOLID (Substitution de Liskov).\nNâ€™hÃ©sitez pas a dÃ©couvrir les autres principes SOLID dans cette sÃ©rie d\u0026rsquo;articles:\n SRP: ResponsabilitÃ© unique OCP: Ouvert-FermÃ© LSP: Substitution de Liskov DIP: Inversion De DÃ©pendance  Aujourd\u0026rsquo;hui je vous propose une explication pour le quatriÃ¨me principe S.O.L.I.D, câ€™est le principe Â«SÃ©grÃ©gation dâ€™interfaceÂ» (Interface Segregation), ce principe affirme qu\u0026rsquo;il vaut mieux plusieurs interfaces spÃ©cifiques Ã  une classe quâ€™une grosse interface gÃ©nÃ©rique, il ne faut pas obliger Ã  implÃ©menter des mÃ©thodes que lâ€™on ne veut pas.\nJe vous donne un exemple:\nUn mauvais exemple public interface IBase { void UpdateId(int id); void UpdateAddress(string address); void UpdatePrice(decimal price); }  public sealed class Customer : IBase { public int Id { get; set; } public string Name { get; set; } public string Address { get; set; } public void UpdateId(int id) { Id = id; } public void UpdateAddress(string address) { Address = address; } public void UpdatePrice(decimal price) { throw new NotImplementedException(); } }  public sealed class Product : IBase { public int Id { get; set; } public string Description { get; set; } public decimal Price { get; set; } public void UpdateId(int id) { Id = id; } public void UpdatePrice(decimal price) { Price = price; } public void UpdateAddress(string address) { throw new NotImplementedException(); } }  Le code est incorrect car la classe Customer doit avoir la mÃ©thode UpdatePrice et la classe Product doit avoir la mÃ©thode UpdateAddress parce qu\u0026rsquo;ils implÃ©mentent la mÃªme interface IBase.\nUn bon exemple public interface IBase { void UpdateId(int id); }  public interface ICustomer : IBase { void UpdateAddress(string address); }  public interface IProduct : IBase { void UpdatePrice(decimal price); }  public sealed class Customer : ICustomer { public int Id { get; set; } public string Name { get; set; } public string Address { get; set; } public void UpdateId(int id) { Id = id; } public void UpdateAddress(string address) { Address = address; } }  public sealed class Product : IProduct { public int Id { get; set; } public string Description { get; set; } public decimal Price { get; set; } public void UpdateId(int id) { Id = id; } public void UpdatePrice(decimal price) { Price = price; } }  Le code est correct car l'interface gÃ©nÃ©rique a Ã©tÃ© divisÃ©e en interfaces spÃ©cifiques.\nLes classes Customer et Product n\u0026rsquo;implÃ©mentent pas de mÃ©thodes qui ne font pas partie de la mÃªme logique mÃ©tier.\nSi vous avez aimÃ© cet article, n\u0026rsquo;hÃ©sitez pas Ã  le partager !\n","permalink":"https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-4-5-segregation-dinterface/","tags":["AUTOMATISATION","SOLID"],"title":"Principes SOLID simplifiÃ©s (4/5): SÃ©grÃ©gation dâ€™interface"},{"categories":["Automatisation","Design Patterns"],"contents":"Introduction Dans mon prÃ©cÃ©dent article jâ€™ai expliquÃ© le deuxiÃ¨me principe SOLID (Ouvert-FermÃ©).\nNâ€™hÃ©sitez pas a dÃ©couvrir les autres principes SOLID dans cette sÃ©rie d\u0026rsquo;articles:\n SRP: ResponsabilitÃ© unique OCP: Ouvert-FermÃ© ISP: SÃ©grÃ©gation dâ€™interface DIP: Inversion De DÃ©pendance  Aujourd\u0026rsquo;hui je vous propose une explication pour le troisiÃ¨me principe S.O.L.I.D, câ€™est le principe Â«Substitution de LiskovÂ» (Liskov Substitution), ce principe affirme que les classes dÃ©rivÃ©es doivent Ãªtre substituables Ã  leurs classes de base.\nJe vous donne un mauvais exemple pour montrer la voilation du principe Substitution de Liskov:\nUn mauvais exemple public class Cat { public virtual string GetName() { return nameof(Cat); } public void Move() { // Some implementation heren } public void Eat() { // Some implementation heren } }  public class Dog : Cat { public override string GetName() { return nameof(Dog); } }  public static class Program { public static void Main() { Cat cat = new Dog(); cat.GetName(); } }  Le code est incorrect car l\u0026rsquo;exÃ©cution de la mÃ©thode \u0026ldquo;cat.GetName ()\u0026rdquo; affichera \u0026ldquo;Dog\u0026rdquo; et non \u0026ldquo;Cat\u0026rdquo; comme prÃ©vu\nUn bon exemple public abstract class Animal { public abstract string GetName(); public virtual void Move() { // Some implementation here } public void Eat() { // Some implementation here } }  public sealed class Cat : Animal { public override string GetName() { return nameof(Cat); } }  public sealed class Dog : Animal { public override string GetName() { return nameof(Dog); } public override void Move() { // Some implementation here } }  public static class Program { public static void Main() { var animals = new List\u0026lt;Animal\u0026gt; { new Cat(), new Dog() }; foreach (var animal in animals) { animal.GetName(); animal.Move(); animal.Eat(); } } }  Le code est correct car les deux classes Cat et Dog peuvent Ãªtre remplacÃ©es par la classe Animal sans avoir de comportements inattendus.\nSi vous avez aimÃ© cet article, n\u0026rsquo;hÃ©sitez pas Ã  le partager !\n","permalink":"https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-3-5-substitution-de-liskov/","tags":["AUTOMATISATION","SOLID"],"title":"Principes SOLID simplifiÃ©s (3/5): Substitution de Liskov"},{"categories":["Automatisation","Design Patterns"],"contents":"Introduction Dans un prÃ©cÃ©dent article jâ€™ai Ã©voquÃ© le premier principe S.O.L.I.D (ResponsabilitÃ© unique).\nNâ€™hÃ©sitez pas a dÃ©couvrir les autres principes SOLID dans cette sÃ©rie d\u0026rsquo;articles:\n SRP: ResponsabilitÃ© unique LSP: Substitution de Liskov ISP: SÃ©grÃ©gation dâ€™interface DIP: Inversion De DÃ©pendance  Maintenant je vous propose une explication pour le deuxiÃ¨me principe S.O.L.I.D, câ€™est le principe Â«Ouvert-FermÃ©Â» (Open/Closed), ce principe affirme qu'une classe doit Ãªtre Ã  la fois ouverte Ã  l\u0026rsquo;extension et fermÃ©e Ã  la modification.\nJe vous donne un exemple:\nUn mauvais exemple public enum PaymentMethod { VisaCard = 1, MasterCard = 2, Cash = 3, }  public class PaymentService { public PaymentMethod PaymentMethod { get; set; } public void ProcessPayment() { if (PaymentMethod == PaymentMethod.VisaCard) { // Some implementation heren } else if (PaymentMethod == PaymentMethod.MasterCard) { // Some implementation heren } else if (PaymentMethod == PaymentMethod.Cash) { // Some implementation here } // Some implementation here } }  Le code est incorrect car il est ouvert Ã  la modification, si un nouveau mode de paiement est ajoutÃ©, la classe doit Ãªtre modifiÃ©e.\nUn bon exemple public interface IPaymentMethod { void ProcessPayment(); }  public sealed class VisaCardPayment : IPaymentMethod { public void ProcessPayment() { // Some implementation here (VisaCardPayment) } }  public sealed class MasterCardPayment : IPaymentMethod { public void ProcessPayment() { // Some implementation here (MasterCardPayment) } }  public sealed class CashPayment : IPaymentMethod { public void ProcessPayment() { // Some implementation here (CashPayment) } }  public class PaymentService { public PaymentService(IPaymentMethod paymentMethod) { PaymentMethod = paymentMethod; } private IPaymentMethod PaymentMethod { get; } public void ProcessPayment() { // Some implementation here PaymentMethod.ProcessPayment(); // Some implementation here } }  Le code est correct car si un nouveau mode de paiement est ajoutÃ©, la classe n\u0026rsquo;est pas modifiÃ©e.\nSi vous avez aimÃ© cet article, n\u0026rsquo;hÃ©sitez pas Ã  le partager !\n","permalink":"https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-2-5-ouvert-ferme/","tags":["AUTOMATISATION","SOLID"],"title":"Principes SOLID simplifiÃ©s (2/5): Ouvert-FermÃ©"},{"categories":["Automatisation","Design Patterns"],"contents":"Les principes S.O.L.I.D dans le contexte de l\u0026rsquo;automatisation des tests L\u0026rsquo;acronyme S.O.L.I.D a Ã©tÃ© inventÃ© par Michael Feathers Ã  partir des principes de programmation orientÃ©e objet identifiÃ©s par Robert Cecil Martin, Ces principes visent Ã  rendre le code plus lisible, facile Ã  maintenir, extensible, rÃ©utilisable et sans rÃ©pÃ©tition.\nL\u0026rsquo;automatisation des tests câ€™est un vrai projet de dÃ©veloppement et lorsque les principes S.O.L.I.D ne sont pas appliquÃ©s le code devient difficile Ã  maintenir ou Ã  faire Ã©voluer.\nDans cet article, je vous propose une explication du principe ResponsabilitÃ© unique (Single Responsibility)\nNâ€™hÃ©sitez pas a dÃ©couvrir les autres principes SOLID dans cette sÃ©rie d\u0026rsquo;articles:\n OCP: Ouvert-FermÃ© LSP: Substitution de Liskov ISP: SÃ©grÃ©gation dâ€™interface DIP: Inversion De DÃ©pendance  Le principe de responsabilitÃ© unique stipule qu\u0026rsquo;une classe ne devrait avoir qu\u0026rsquo;une seule raison de changer et une seule responsabilitÃ©.\nOn comprend toujours mieux avec un exemple!\nUn mauvais exemple public sealed class Customer { public int Id { get; set; } public string Name { get; set; } public bool Active { get; set; } public void ActivateCustomer() { Active = true; } public void InactivateCustomer() { Active = false; } public void AddCustomer() { // Some implementation here (database) ... } public void DeleteCustomer() { // Some implementation here (database) ... } }  Le code de l\u0026rsquo;exemple est incorrect car il a deux responsabilitÃ©s, les rÃ¨gles de gestion et la persistance de la base de donnÃ©es.\nUn bon exemple public sealed class Customer { public int Id { get; set; } public string Name { get; set; } public bool Active { get; set; } public void ActivateCustomer() { Active = true; } public void InactivateCustomer() { Active = false; } }  public sealed class CustomerRepository { public void AddCustomer(Customer customer) { // Some implementation here (database) ... } public void DeleteCustomer(Customer customer) { // Some implementation here (database) ... } }  Le code est correct car les responsabilitÃ©s ont Ã©tÃ© rÃ©parties et chaque classe n\u0026rsquo;a qu\u0026rsquo;une seule raison de changer.\nSi vous avez aimÃ© cet article, n\u0026rsquo;hÃ©sitez pas Ã  le partager !\n","permalink":"https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-1-5-responsabilite-unique/","tags":["AUTOMATISATION","SOLID"],"title":"Principes SOLID simplifiÃ©s (1/5): ResponsabilitÃ© unique"},{"categories":null,"contents":"Ã€ propos de ce blog Ce blog est un espace pour partager mes rÃ©flexions sur le Testing, l'Automatisation de tests logiciels et les pratiques agiles ATDD/BDD.\nÃ€ propos de moi Je suis Tawfik Nouri, coach et formateur expert en automatisation des tests web et mobiles avec une double compÃ©tence dÃ©veloppements et testing.\nJ\u0026rsquo;ai un intÃ©rÃªt particulier pour les pratiques ATDD/BDD\nJ\u0026rsquo;ai travaillÃ© pendant des annÃ©es dans le domaine des solutions industrielles et scientifiques sur plusieurs projets Ã  l\u0026rsquo;Ã©chelle internationale et dans des domaines technologiques variÃ©s pour plusieurs clients:\n France TÃ©lÃ©com SFR Bouygues Telecom Canal + \u0026hellip;  Ensuite, je me suis orientÃ© vers les nouvelles technologies, l\u0026rsquo;objet rÃ©el de ma passion l\u0026rsquo;automatisation des tests web, mobiles, desktop et les pratiques agiles ATDD/BDD.\nJ\u0026rsquo;interviens en tant que consultant / formateur dans les domaines suivants :\n Automatisation des tests pour les applications Web (Selenium WebDriver / WebdriverIO, \u0026hellip;) Automatisation des tests pour les applications Mobile (Appium, WebdriverIO, \u0026hellip;) Automatisation des tests de web services Pratiques Agiles ATDD/BDD Framework ATDD/BDD (Cucumber, Specflow, FitNesse, HipTest \u0026hellip;) Les fondamentaux du langage Java / C# / JavaScript (Automatisation de tests) Outils de Tests Agiles (Xray For Jira / HipTest)  ","permalink":"https://blog.expandtesting.com/a-propos/","tags":null,"title":"A propos"},{"categories":null,"contents":"","permalink":"https://blog.expandtesting.com/search/","tags":null,"title":"RÃ©sultats de recherche"}]