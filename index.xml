<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tous les articles on Expand Testing Blog | Tawfik Nouri</title><link>https://blog.expandtesting.com/</link><description>Recent content in Tous les articles on Expand Testing Blog | Tawfik Nouri</description><generator>Hugo -- gohugo.io</generator><language>fr</language><lastBuildDate>Sat, 01 Jan 1453 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.expandtesting.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Benchmark Css Vs. Xpath</title><link>https://blog.expandtesting.com/webdriver/css-vs-xpath/</link><pubDate>Sat, 01 Aug 2020 18:08:30 +0200</pubDate><guid>https://blog.expandtesting.com/webdriver/css-vs-xpath/</guid><description>Introduction Dans un pr√©c√©dent article j&amp;rsquo;ai expliqu√© comment choisir la meilleure strat√©gie de localisation webdriver en fonction du contexte du projet.
En revanche il manquait des donn√©es statistiques Css Vs.Xpath pour r√©duire la propagation du bruit üòõ</description></item><item><title>Comment choisir une strat√©gie de localisation Webdriver ?</title><link>https://blog.expandtesting.com/webdriver/strategie-localisation-webdriver/</link><pubDate>Thu, 23 Jul 2020 08:08:30 +0200</pubDate><guid>https://blog.expandtesting.com/webdriver/strategie-localisation-webdriver/</guid><description>Introduction Comme vous le savez les outils d&amp;rsquo;automatisation des tests UI comme Selenium, WebdriverIO, etc. utilisent le m√™me principe de fonctionnement et partagent les m√™mes probl√©matiques.
Tous les tests r√©alis√©s avec un outil webdriver est bas√© principalement sur le DOM et utilisent les s√©lecteurs web pour interagir avec l'interface utilisateur via des drivers (chromedriver, geckodriver, etc.</description></item><item><title>Comprendre le pattern Page Object Model</title><link>https://blog.expandtesting.com/design-patterns/page-object-model/</link><pubDate>Thu, 09 Jul 2020 12:00:30 +0200</pubDate><guid>https://blog.expandtesting.com/design-patterns/page-object-model/</guid><description>Introduction Le pattern Page Object Model est un des mod√®les de conception d'automatisation de test les plus largement utilis√©s.
La plupart des ing√©nieurs QA/SDET (Software Development Engineer in Test) ont √† un moment donn√© utilis√© une variante du pattern page object model.</description></item><item><title>Comprendre les concepts du testing √† travers les vid√©os d'illustrations</title><link>https://blog.expandtesting.com/videos-concepts/testing/</link><pubDate>Wed, 10 Jun 2020 12:24:30 +0200</pubDate><guid>https://blog.expandtesting.com/videos-concepts/testing/</guid><description>Cette page est d√©di√©e exclusivement aux vid√©os d&amp;rsquo;illustrations des concepts du testing !
Tests unitaires sans tests d&amp;rsquo;int√©grations (Vid√©o 1) L&amp;rsquo;id√©e derri√®re cette vid√©o c‚Äôest pour vous expliquer l'importance d&amp;rsquo;avoir une strat√©gie d&amp;rsquo;automatisation pour distribuer les tests √† plusieurs niveaux (unitaires, int√©gration, acceptation, etc)</description></item><item><title>Principes SOLID simplifi√©s (5/5): Inversion De D√©pendance</title><link>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-5-5-inversion-de-dependance/</link><pubDate>Sat, 06 Jun 2020 18:15:30 +0200</pubDate><guid>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-5-5-inversion-de-dependance/</guid><description>Introduction Dans mon pr√©c√©dent article j‚Äôai expliqu√© le quatri√®me principe SOLID (S√©gr√©gation d‚Äôinterface).
N‚Äôh√©sitez pas a d√©couvrir les autres principes SOLID dans cette s√©rie d&amp;rsquo;articles:
SRP: Responsabilit√© unique OCP: Ouvert-Ferm√© LSP: Substitution de Liskov ISP: S√©gr√©gation d‚Äôinterface Aujourd&amp;rsquo;hui je vous propose une explication pour le cinqui√®me principe S.</description></item><item><title>Principes SOLID simplifi√©s (4/5): S√©gr√©gation d‚Äôinterface</title><link>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-4-5-segregation-dinterface/</link><pubDate>Fri, 05 Jun 2020 04:38:30 +0200</pubDate><guid>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-4-5-segregation-dinterface/</guid><description>Introduction Dans mon pr√©c√©dent article j‚Äôai expliqu√© le troisi√®me principe SOLID (Substitution de Liskov).
N‚Äôh√©sitez pas a d√©couvrir les autres principes SOLID dans cette s√©rie d&amp;rsquo;articles:
SRP: Responsabilit√© unique OCP: Ouvert-Ferm√© LSP: Substitution de Liskov DIP: Inversion De D√©pendance Aujourd&amp;rsquo;hui je vous propose une explication pour le quatri√®me principe S.</description></item><item><title>Principes SOLID simplifi√©s (3/5): Substitution de Liskov</title><link>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-3-5-substitution-de-liskov/</link><pubDate>Thu, 04 Jun 2020 04:38:30 +0200</pubDate><guid>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-3-5-substitution-de-liskov/</guid><description>Introduction Dans mon pr√©c√©dent article j‚Äôai expliqu√© le deuxi√®me principe SOLID (Ouvert-Ferm√©).
N‚Äôh√©sitez pas a d√©couvrir les autres principes SOLID dans cette s√©rie d&amp;rsquo;articles:
SRP: Responsabilit√© unique OCP: Ouvert-Ferm√© ISP: S√©gr√©gation d‚Äôinterface DIP: Inversion De D√©pendance Aujourd&amp;rsquo;hui je vous propose une explication pour le troisi√®me principe S.</description></item><item><title>Principes SOLID simplifi√©s (2/5): Ouvert-Ferm√©</title><link>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-2-5-ouvert-ferme/</link><pubDate>Wed, 03 Jun 2020 04:38:30 +0200</pubDate><guid>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-2-5-ouvert-ferme/</guid><description>Introduction Dans un pr√©c√©dent article j‚Äôai √©voqu√© le premier principe S.O.L.I.D (Responsabilit√© unique).
N‚Äôh√©sitez pas a d√©couvrir les autres principes SOLID dans cette s√©rie d&amp;rsquo;articles:
SRP: Responsabilit√© unique LSP: Substitution de Liskov ISP: S√©gr√©gation d‚Äôinterface DIP: Inversion De D√©pendance Maintenant je vous propose une explication pour le deuxi√®me principe S.</description></item><item><title>Principes SOLID simplifi√©s (1/5): Responsabilit√© unique</title><link>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-1-5-responsabilite-unique/</link><pubDate>Mon, 01 Jun 2020 13:38:30 +0200</pubDate><guid>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-1-5-responsabilite-unique/</guid><description>Les principes S.O.L.I.D dans le contexte de l&amp;rsquo;automatisation des tests L&amp;rsquo;acronyme S.O.L.I.D a √©t√© invent√© par Michael Feathers √† partir des principes de programmation orient√©e objet identifi√©s par Robert Cecil Martin, Ces principes visent √† rendre le code plus lisible, facile √† maintenir, extensible, r√©utilisable et sans r√©p√©tition.</description></item><item><title>A propos</title><link>https://blog.expandtesting.com/a-propos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.expandtesting.com/a-propos/</guid><description>√Ä propos de ce blog Ce blog est un espace pour partager mes r√©flexions sur le Testing, l'Automatisation de tests logiciels et les pratiques agiles ATDD/BDD.
√Ä propos de moi Je suis Tawfik Nouri, coach et formateur expert en automatisation des tests web et mobiles avec une double comp√©tence d√©veloppements et testing.</description></item><item><title>R√©sultats de recherche</title><link>https://blog.expandtesting.com/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://blog.expandtesting.com/search/</guid><description/></item></channel></rss>