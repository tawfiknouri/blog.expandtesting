<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design Patterns on Expand Testing Blog | Tawfik Nouri</title><link>https://blog.expandtesting.com/categories/design-patterns/</link><description>Recent content in Design Patterns on Expand Testing Blog | Tawfik Nouri</description><generator>Hugo -- gohugo.io</generator><language>fr</language><lastBuildDate>Thu, 09 Jul 2020 12:00:30 +0200</lastBuildDate><atom:link href="https://blog.expandtesting.com/categories/design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Comprendre le pattern Page Object Model</title><link>https://blog.expandtesting.com/design-patterns/page-object-model/</link><pubDate>Thu, 09 Jul 2020 12:00:30 +0200</pubDate><guid>https://blog.expandtesting.com/design-patterns/page-object-model/</guid><description>Introduction Le pattern Page Object Model est un des modèles de conception d'automatisation de test les plus largement utilisés.
La plupart des ingénieurs QA/SDET (Software Development Engineer in Test) ont à un moment donné utilisé une variante du pattern page object model.</description></item><item><title>Principes SOLID simplifiés (5/5): Inversion De Dépendance</title><link>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-5-5-inversion-de-dependance/</link><pubDate>Sat, 06 Jun 2020 18:15:30 +0200</pubDate><guid>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-5-5-inversion-de-dependance/</guid><description>Introduction Dans mon précédent article j’ai expliqué le quatrième principe SOLID (Ségrégation d’interface).
N’hésitez pas a découvrir les autres principes SOLID dans cette série d&amp;rsquo;articles:
SRP: Responsabilité unique OCP: Ouvert-Fermé LSP: Substitution de Liskov ISP: Ségrégation d’interface Aujourd&amp;rsquo;hui je vous propose une explication pour le cinquième principe S.</description></item><item><title>Principes SOLID simplifiés (4/5): Ségrégation d’interface</title><link>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-4-5-segregation-dinterface/</link><pubDate>Fri, 05 Jun 2020 04:38:30 +0200</pubDate><guid>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-4-5-segregation-dinterface/</guid><description>Introduction Dans mon précédent article j’ai expliqué le troisième principe SOLID (Substitution de Liskov).
N’hésitez pas a découvrir les autres principes SOLID dans cette série d&amp;rsquo;articles:
SRP: Responsabilité unique OCP: Ouvert-Fermé LSP: Substitution de Liskov DIP: Inversion De Dépendance Aujourd&amp;rsquo;hui je vous propose une explication pour le quatrième principe S.</description></item><item><title>Principes SOLID simplifiés (3/5): Substitution de Liskov</title><link>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-3-5-substitution-de-liskov/</link><pubDate>Thu, 04 Jun 2020 04:38:30 +0200</pubDate><guid>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-3-5-substitution-de-liskov/</guid><description>Introduction Dans mon précédent article j’ai expliqué le deuxième principe SOLID (Ouvert-Fermé).
N’hésitez pas a découvrir les autres principes SOLID dans cette série d&amp;rsquo;articles:
SRP: Responsabilité unique OCP: Ouvert-Fermé ISP: Ségrégation d’interface DIP: Inversion De Dépendance Aujourd&amp;rsquo;hui je vous propose une explication pour le troisième principe S.</description></item><item><title>Principes SOLID simplifiés (2/5): Ouvert-Fermé</title><link>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-2-5-ouvert-ferme/</link><pubDate>Wed, 03 Jun 2020 04:38:30 +0200</pubDate><guid>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-2-5-ouvert-ferme/</guid><description>Introduction Dans un précédent article j’ai évoqué le premier principe S.O.L.I.D (Responsabilité unique).
N’hésitez pas a découvrir les autres principes SOLID dans cette série d&amp;rsquo;articles:
SRP: Responsabilité unique LSP: Substitution de Liskov ISP: Ségrégation d’interface DIP: Inversion De Dépendance Maintenant je vous propose une explication pour le deuxième principe S.</description></item><item><title>Principes SOLID simplifiés (1/5): Responsabilité unique</title><link>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-1-5-responsabilite-unique/</link><pubDate>Mon, 01 Jun 2020 13:38:30 +0200</pubDate><guid>https://blog.expandtesting.com/design-patterns/principes-solid-simplifies-1-5-responsabilite-unique/</guid><description>Les principes S.O.L.I.D dans le contexte de l&amp;rsquo;automatisation des tests L&amp;rsquo;acronyme S.O.L.I.D a été inventé par Michael Feathers à partir des principes de programmation orientée objet identifiés par Robert Cecil Martin, Ces principes visent à rendre le code plus lisible, facile à maintenir, extensible, réutilisable et sans répétition.</description></item></channel></rss>